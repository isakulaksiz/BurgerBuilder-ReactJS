{"ast":null,"code":"import _defineProperty from \"C:\\\\react-projects\\\\burger-builder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\react-projects\\\\burger-builder\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = _objectSpread({}, this.state.controls, {\n        [controlName]: _objectSpread({}, this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (var key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value //hata -> displayValue\n      ,\n      invalid: !formElement.config.valid,\n      touched: formElement.config.touched,\n      shouldValidate: formElement.config.validation,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n\n    if (this.props.laoding) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, errorMessage, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"SUBMIT\")), React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP', \" \"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:\\react-projects\\burger-builder\\src\\containers\\Auth\\Auth.js"],"names":["React","Component","connect","Input","Button","Spinner","classes","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","laoding","errorMessage","error","message","mapStateToProps","loading","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls:   {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    checkValidity(value, rules) {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n        \r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls  = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            };\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (var key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }   \r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}  //hata -> displayValue\r\n                invalid={!formElement.config.valid}\r\n                touched={formElement.config.touched}\r\n                shouldValidate={formElement.config.validation}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if(this.props.laoding) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error) {\r\n            errorMessage  = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'} </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}